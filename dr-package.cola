@use strict

@import "fs"   as FS
@import "path" as Path
@import "npm"  as NPM

@export _ as resolve;
@export install as installShim;

NPM.load((err) {});

Array shimModules = [
	"process",
	"buffer",
	"browserify-zlib",
	"vm-browserify",
	"util",
	"url",
	"tty-browserify",
	"timers-browserify",
	"string_decoder",
	"stream-browserify",
	"querystring",
	"punycode",
	"path-browserify",
	"os-browserify",
	"https-browserify",
	"http-browserify",
	"events",
	"domain-browser",
	"crypto-browserify",
	"constants-browserify",
	"console-browserify",
	"assert"
];

Object getJson(String filename) {
	String jsonSource = FS.readFileSync(filename, "utf8");
	return jsonSource ? JSON.parse(jsonSource) : {};
}

String tryToFindSource(String filename, bool strict = false) {
	String result;

	if FS.existsSync(filename) {
		return "./@filename";
	}

	if !strict && FS.existsSync(result = "@filename.js") {
		return "./@result";
	}

	return "";
}

void handlePackage(String file, Object modules) {
	Object pkg  = getJson("./@file"), 
	       path = Path.dirname(file), index;

	if index = tryToFindSource("@path/index.js", true) {
		return modules[pkg.name] = index;
	}

	if pkg.main && (index = tryToFindSource(Path.join(path, pkg.main))) {
		return modules[pkg.name] = index;
	} 

	if pkg.scripts is Array && pkg.scripts[0] 
		&& (index = tryToFindSource(Path.join(path, pkg.scripts[0]))) {
		return modules[pkg.name] = index;
	}

	return false;
}
 
Object _(String path, Object modules = {}) {
	Array ls = FS.readdirSync(path), handled;

	ls.forEach((file) {
		if file.indexOf(".") == 0 {
			return;
		}

		if !handled && (file == "package.json" || file == "component.json") {
			handled = handlePackage(Path.join(path, file), modules);
		}

		if FS.statSync(file = Path.join(path, file)).isDirectory() {
			_(file, modules);
		}
	});

	return modules;
}

void install(String path) {
	path = Path.join(path, "./browser-shim");

	if FS.existsSync(path) {
		return;
	}

	NPM.load((err) {

		if err {
			throw err;
		}

	    NPM.commands.install(path, shimModules, (err) {
	        if err {
	        	throw err;
	    	}
	    });

	});
}